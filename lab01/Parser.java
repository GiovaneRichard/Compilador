/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
    public class Parser implements ParserConstants {
        public static void main(String[] args) {
            try{
                Parser parser = new Parser(System.in);
                parser.Start();
            } catch (Throwable e) {
                System.out.println(e.getMessage());
            }
        }

// Token priority by order
  static final public void Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEANVALUE:
      case TYPENAMESTRING:
      case MAIN:
      case LENGTH:
      case SYSTEMOUTPRINTLN:
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CASE:
      case CATCH:
      case CHAR:
      case CLASS:
      case CONST:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case ELSE:
      case ENUM:
      case EXTENDS:
      case FINAL:
      case FINALLY:
      case FLOAT:
      case FOR:
      case GOTO:
      case IF:
      case IMPLEMENTS:
      case IMPORT:
      case INSTANCEOF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case PACKAGE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case THROWS:
      case TRANSIENT:
      case TRY:
      case UNDERSCORE:
      case VOID:
      case VOLATILE:
      case WHILE:
      case IDENTIFIER:
      case DECIMAL_NUMERAL:
      case DECIMAL_FLOATING_POINT:
      case STRING_LITERAL:
      case SEPARATORS:
      case OPERATORS:
      case SPACES:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYSTEMOUTPRINTLN:{
        jj_consume_token(SYSTEMOUTPRINTLN);
        break;
        }
      case BOOLEANVALUE:{
        jj_consume_token(BOOLEANVALUE);
        break;
        }
      case TYPENAMESTRING:{
        jj_consume_token(TYPENAMESTRING);
        break;
        }
      case MAIN:{
        jj_consume_token(MAIN);
        break;
        }
      case LENGTH:{
        jj_consume_token(LENGTH);
        break;
        }
      case ABSTRACT:{
        jj_consume_token(ABSTRACT);
        break;
        }
      case ASSERT:{
        jj_consume_token(ASSERT);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      case BREAK:{
        jj_consume_token(BREAK);
        break;
        }
      case BYTE:{
        jj_consume_token(BYTE);
        break;
        }
      case CASE:{
        jj_consume_token(CASE);
        break;
        }
      case CATCH:{
        jj_consume_token(CATCH);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      case CLASS:{
        jj_consume_token(CLASS);
        break;
        }
      case CONST:{
        jj_consume_token(CONST);
        break;
        }
      case CONTINUE:{
        jj_consume_token(CONTINUE);
        break;
        }
      case DO:{
        jj_consume_token(DO);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      case ELSE:{
        jj_consume_token(ELSE);
        break;
        }
      case ENUM:{
        jj_consume_token(ENUM);
        break;
        }
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        break;
        }
      case FINAL:{
        jj_consume_token(FINAL);
        break;
        }
      case FINALLY:{
        jj_consume_token(FINALLY);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
        break;
        }
      case GOTO:{
        jj_consume_token(GOTO);
        break;
        }
      case IF:{
        jj_consume_token(IF);
        break;
        }
      case IMPLEMENTS:{
        jj_consume_token(IMPLEMENTS);
        break;
        }
      case IMPORT:{
        jj_consume_token(IMPORT);
        break;
        }
      case INSTANCEOF:{
        jj_consume_token(INSTANCEOF);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case INTERFACE:{
        jj_consume_token(INTERFACE);
        break;
        }
      case LONG:{
        jj_consume_token(LONG);
        break;
        }
      case NATIVE:{
        jj_consume_token(NATIVE);
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        break;
        }
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        break;
        }
      case PRIVATE:{
        jj_consume_token(PRIVATE);
        break;
        }
      case PROTECTED:{
        jj_consume_token(PROTECTED);
        break;
        }
      case PUBLIC:{
        jj_consume_token(PUBLIC);
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
        break;
        }
      case SHORT:{
        jj_consume_token(SHORT);
        break;
        }
      case STATIC:{
        jj_consume_token(STATIC);
        break;
        }
      case STRICTFP:{
        jj_consume_token(STRICTFP);
        break;
        }
      case SUPER:{
        jj_consume_token(SUPER);
        break;
        }
      case SWITCH:{
        jj_consume_token(SWITCH);
        break;
        }
      case SYNCHRONIZED:{
        jj_consume_token(SYNCHRONIZED);
        break;
        }
      case THIS:{
        jj_consume_token(THIS);
        break;
        }
      case THROW:{
        jj_consume_token(THROW);
        break;
        }
      case THROWS:{
        jj_consume_token(THROWS);
        break;
        }
      case TRANSIENT:{
        jj_consume_token(TRANSIENT);
        break;
        }
      case TRY:{
        jj_consume_token(TRY);
        break;
        }
      case UNDERSCORE:{
        jj_consume_token(UNDERSCORE);
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      case VOLATILE:{
        jj_consume_token(VOLATILE);
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      case DECIMAL_FLOATING_POINT:{
        jj_consume_token(DECIMAL_FLOATING_POINT);
        break;
        }
      case DECIMAL_NUMERAL:{
        jj_consume_token(DECIMAL_NUMERAL);
        break;
        }
      case STRING_LITERAL:{
        jj_consume_token(STRING_LITERAL);
        break;
        }
      case OPERATORS:{
        jj_consume_token(OPERATORS);
        break;
        }
      case SEPARATORS:{
        jj_consume_token(SEPARATORS);
        break;
        }
      case SPACES:{
        jj_consume_token(SPACES);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffffe,0xfffffffe,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x9ffffff,0x9ffffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xe82,0xe82,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[76];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 76; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
